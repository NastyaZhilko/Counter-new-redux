{"version":3,"sources":["components/Button.module.css","App.module.css","components/Button.tsx","components/Input.tsx","components/InputSetting.tsx","localStorage/LocalStarage.tsx","redux/redux-counter.ts","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","components/Input.module.css","components/InputSetting.module.css"],"names":["module","exports","ButtonComp","props","className","s","button","onClick","clickOnButton","disabled","disabledButton","title","InputComp","message","errorStyle","correctlyStyle","value","maxValue","InputSettings","input","onChange","e","changeValue","Number","currentTarget","type","saveValue","startValue","obj","localStorage","setItem","JSON","stringify","restoreState","getItem","parse","initialState","count","start","max","disabledInc","disabledReset","disabledSet","App","dispatch","useDispatch","counter","useSelector","state","body","changeMaxValueAC","changeStartValueAC","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","stateCopy","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35ed6c19.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__Dxyj4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1e8CC\",\"Button\":\"App_Button__OxHgK\",\"body\":\"App_body__woq_Y\"};","import React from 'react';\r\nimport s from './Button.module.css';\r\nexport type ButtonCompType = {\r\n    clickOnButton: () => void\r\n    title: string\r\n    disabledButton: boolean\r\n\r\n}\r\nexport const ButtonComp = (props:ButtonCompType) => {\r\n    return (\r\n\r\n        <div className={s.button}>\r\n            <button onClick={props.clickOnButton} disabled={props.disabledButton}>{props.title}</button>\r\n        </div>\r\n    )\r\n}","\r\nimport React from 'react';\r\nimport s from './Input.module.css';\r\nexport type InputCompType = {\r\n    value: number\r\n    maxValue: number\r\n    message: string\r\n\r\n}\r\nexport const InputComp = (props: InputCompType) => {\r\n    return (\r\n        <div >\r\n            {props.message ? <h3 className={props.message === 'Incorrect value' ? s.errorStyle : s.correctlyStyle}>{props.message}</h3>\r\n                :<h3 className={(props.value === props.maxValue) ? s.errorStyle : s.correctlyStyle}>{props.value}</h3>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport s from './InputSetting.module.css';\r\n\r\n\r\nexport type InputSettingsType = {\r\n    title: string\r\n    value: number | string\r\n    changeValue: (value: number) => void\r\n    message?: boolean\r\n}\r\n\r\nexport const InputSettings = (props: InputSettingsType) => {\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(Number(e.currentTarget.value))\r\n    }\r\n    return (\r\n        <div className={s.input}>\r\n            <span>{props.title}</span>\r\n            <input className={(props.value < 0 || props.message) ? s.errorStyle : s.correctlyStyle}\r\n                   onChange={changeValue}\r\n                   value={props.value}\r\n                   type={'number'}/>\r\n        </div>\r\n    )\r\n}","export const saveValue=(maxValue:number, startValue:number|string)=>{\r\n    let obj={\r\n        'max':maxValue,\r\n        'start':startValue\r\n    }\r\n    localStorage.setItem('counter', JSON.stringify(obj))\r\n}\r\nexport const restoreState=()=>{\r\n    let obj=localStorage.getItem('counter')\r\n    return obj ? JSON.parse(obj):{'max':null, 'start':null}\r\n}","import {restoreState, saveValue} from \"../localStorage/LocalStarage\";\r\n\r\n\r\nconst INC_BUTTON = 'INC_BUTTON'\r\nconst RESET_BUTTON = 'RESET_BUTTON'\r\nconst CHANGE_START_VALUE = 'CHANGE_START_VALUE'\r\nconst CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE'\r\nconst SET_BUTTON = 'SET_BUTTON'\r\n\r\nexport type CountReducerType = {\r\n    count: number\r\n    startValue: number\r\n    maxValue: number\r\n    disabledInc: boolean\r\n    disabledReset: boolean\r\n    disabledSet: boolean\r\n    message: string\r\n}\r\n\r\nexport type ActionType =\r\n\r\n    ReturnType<typeof incButtonAC> |\r\n    ReturnType<typeof resetButtonAC> |\r\n    ReturnType<typeof changeStartValueAC> |\r\n    ReturnType<typeof changeMaxValueAC> |\r\n    ReturnType<typeof setButtonAC>\r\n\r\nexport let initialState: CountReducerType = {\r\n    count: restoreState().start,\r\n    startValue: restoreState().start,\r\n    maxValue: restoreState().max,\r\n    disabledInc: false,\r\n    disabledReset: true,\r\n    disabledSet: true,\r\n    message: ''\r\n}\r\n\r\nexport const countReducer = (state: CountReducerType = initialState, action: ActionType): CountReducerType => {\r\n    switch (action.type) {\r\n\r\n\r\n        case 'INC_BUTTON': {\r\n            const stateCopy = {...state}\r\n            if (stateCopy.count < stateCopy.maxValue) {\r\n                stateCopy.count = (stateCopy.count+1)\r\n                stateCopy.disabledInc = stateCopy.count >= stateCopy.maxValue\r\n                stateCopy.disabledReset = stateCopy.count < stateCopy.maxValue\r\n            } else {\r\n                stateCopy.disabledReset = false\r\n                stateCopy.disabledInc = true\r\n            }\r\n            return stateCopy\r\n\r\n        }\r\n        case 'RESET_BUTTON': {\r\n            const stateCopy = {...state}\r\n            stateCopy.count = stateCopy.startValue\r\n            stateCopy.disabledInc = false\r\n            stateCopy.disabledReset = true\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE_START_VALUE': {\r\n            const stateCopy = {...state}\r\n            stateCopy.disabledReset = true\r\n            stateCopy.disabledInc = true\r\n            stateCopy.startValue = action.startValue\r\n            if((stateCopy.maxValue <= action.startValue) || (action.startValue < 0)){\r\n                stateCopy.disabledSet = true\r\n                stateCopy.message = 'Incorrect value'\r\n            }else{\r\n                stateCopy.disabledSet = false\r\n                stateCopy.message = \"enter values and press 'set'\"\r\n            }\r\n            return stateCopy\r\n\r\n        }\r\n        case 'CHANGE_MAX_VALUE': {\r\n            const stateCopy = {...state}\r\n\r\n            if((action.maxValue <= stateCopy.startValue) || (stateCopy.startValue < 0)){\r\n                stateCopy.maxValue = action.maxValue\r\n                stateCopy.disabledReset = true\r\n                stateCopy.disabledInc = true\r\n                stateCopy.disabledSet = true\r\n                stateCopy.message = 'Incorrect value'\r\n            }else{\r\n            stateCopy.maxValue = action.maxValue\r\n            stateCopy.disabledReset = true\r\n            stateCopy.disabledInc = true\r\n            stateCopy.disabledSet = false\r\n            stateCopy.message = \"enter values and press 'set'\"}\r\n            return stateCopy\r\n        }\r\n        case 'SET_BUTTON': {\r\n            const stateCopy = {...state}\r\n            stateCopy.count = stateCopy.startValue\r\n            stateCopy.disabledSet = true\r\n            stateCopy.disabledReset = true\r\n            stateCopy.disabledInc = false\r\n            stateCopy.message = ''\r\n            saveValue(stateCopy.maxValue, stateCopy.startValue)\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const incButtonAC = () => {\r\n    return {type: INC_BUTTON} as const\r\n}\r\nexport const resetButtonAC = () => {\r\n    return {type: RESET_BUTTON} as const\r\n}\r\nexport const changeStartValueAC = (startValue: number) => {\r\n    return {type: CHANGE_START_VALUE, startValue} as const\r\n}\r\nexport const changeMaxValueAC = (maxValue: number) => {\r\n    return {type: CHANGE_MAX_VALUE, maxValue} as const\r\n}\r\nexport const setButtonAC = () => {\r\n    return {type: SET_BUTTON} as const\r\n}\r\n\r\n","import React from 'react';\nimport s from './App.module.css';\nimport {ButtonComp} from \"./components/Button\";\nimport {InputComp} from \"./components/Input\";\nimport {InputSettings} from \"./components/InputSetting\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux/store\";\nimport {\n    changeMaxValueAC,\n    changeStartValueAC,\n    CountReducerType,\n    incButtonAC,\n    resetButtonAC,\n    setButtonAC\n} from \"./redux/redux-counter\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const counter = useSelector<AppStateType, CountReducerType>(state => state.counter)\n\n//меняем стартовое значение\n    const changeStartValue = (startValue: number) => {\n        dispatch(changeStartValueAC(startValue))\n    }\n//меняем максимальное значение\n    const changeMaxValue = (maxValue: number) => {\n        dispatch(changeMaxValueAC(maxValue))\n    }\n//увеличиваем значение на 1 при нажание ни кнопку \"inc\"\n    const incButton = () => {\n        dispatch(incButtonAC())\n    }\n//возвращаем стартовое значение при нажатии на кнопку \"reset\"\n    const resetButton = () => {\n        dispatch(resetButtonAC())\n    }\n//отправляем новое стартовое значение в коунтер\n    const setButton = () => {\n        dispatch(setButtonAC())\n    }\n    return (\n        <div className={s.App}>\n            <div>\n                <h1>Settings</h1>\n                <div className={s.body}>\n                    <InputSettings\n                        value={counter.maxValue}\n                        title={'max value:'}\n                        changeValue={changeMaxValue}\n                        message={counter.maxValue <= counter.startValue}\n                    />\n                    <InputSettings\n                        value={counter.startValue}\n                        title={'start value:'}\n                        changeValue={changeStartValue}\n                        message={counter.startValue >= counter.maxValue}\n                    />\n                    <div className={s.Button}>\n                        <ButtonComp\n                            clickOnButton={setButton}\n                            title={'set'}\n                            disabledButton={counter.disabledSet}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div>\n                <h1>Counter</h1>\n                <div className={s.body}>\n                    <InputComp\n                        value={counter.count}\n                        maxValue={counter.maxValue}\n                        message={counter.message}\n                    />\n                    <div className={s.Button}>\n                        <ButtonComp\n                            clickOnButton={incButton}\n                            title={'inc'}\n                            disabledButton={counter.disabledInc}\n                        />\n                        <ButtonComp\n                            clickOnButton={resetButton}\n                            title={'reset'}\n                            disabledButton={counter.disabledReset}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {countReducer} from \"./redux-counter\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\nconst rootReducer=combineReducers({\r\n    counter: countReducer\r\n})\r\n\r\nexport type AppStateType=ReturnType<typeof rootReducer>\r\n\r\nexport const store=createStore (rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n<Provider store={store}>\n    <App />\n</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"correctlyStyle\":\"Input_correctlyStyle__25Z1E\",\"errorStyle\":\"Input_errorStyle__1TcTk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"correctlyStyle\":\"InputSetting_correctlyStyle__1cZ-l\",\"errorStyle\":\"InputSetting_errorStyle__YSMHj\",\"input\":\"InputSetting_input__2roys\"};"],"sourceRoot":""}